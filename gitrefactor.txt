diff --git a/src/clueGame/BadConfigFormatException.java b/src/clueGame/BadConfigFormatException.java
index b0aa4da..cfa992e 100644
--- a/src/clueGame/BadConfigFormatException.java
+++ b/src/clueGame/BadConfigFormatException.java
@@ -3,6 +3,7 @@
  * This is the BadConfigFormatException class *insert information about class*
  */
 
+//todo
 package clueGame;
 
 import java.io.FileNotFoundException;
diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index c3c1d3a..97ae86e 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -26,11 +26,9 @@ public class Board {
 	private Set<BoardCell> targets;
 	private Set<BoardCell> visited;
 	private static Board theInstance = new Board();
-
-
-	/*
-	 *  method calculate the adjacencies  of each cell in the board
-	 */
+	
+	
+	// method calculate the adjacencies  of each cell in the board
 	private void calculateAdjacencies(int rows, int columns) {
 		for (int row = 0; row < rows; row++) { // going to each cell 
 			for (int column = 0; column < columns; column++) {
@@ -47,27 +45,23 @@ public class Board {
 				if ((column + 1) < columns) { // right neighbor
 					cell.addAdj(grid[row][column+1]);
 				}
-
+				
 			}
 		}
 	}
-
-	/*
-	 * constructor is private to ensure only one can be created
-	 */
+	
+	// constructor is private to ensure only one can be created
 	private Board() {
 		super() ;
 	}
-
-	/*
-	 * this method returns the only Board
-	 */
+	
+	// this method returns the only Board
 	public static Board getInstance() {
 		return theInstance;
 	}
-
+	
 	/*
-	 * initialize the board 
+	 * initialize the board (since we are using singleton pattern)
 	 */
 	public void initialize() 
 	{
@@ -75,13 +69,12 @@ public class Board {
 			this.loadSetupConfig();
 			this.loadLayoutConfig();
 		} catch (BadConfigFormatException e) {
+			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
 	}	
 
-	/*
-	 * calculates legal targets for a move from startCell of length pathlength
-	 */
+	// calculates legal targets for a move from startCell of length pathlength
 	public void calcTargets(BoardCell startCell, int pathlength) {
 		// put starting cell visited
 		visited.add(startCell);
@@ -93,129 +86,101 @@ public class Board {
 			}
 			// add cell to visited if not
 			visited.add(adjCell);
-
+			
 			// if pathlength is 1 or there is a room it is a target
 			if (pathlength == 1 || adjCell.isRoom() == true) {
 				// if cell is occupied it is not
 				if (adjCell.isOccupied() == false) {
 					targets.add(adjCell);
 				}
+				
 			}
 			// go next adjCell cell
 			else {
 				calcTargets(adjCell, pathlength - 1);
 			}
-
+			
 			// remove adjCell from visited set
 			visited.remove(adjCell);
-
+			
 		}
 	}
 	
-	/*
-	 * Method reads Setup File and sets game up
-	 */
 	public void loadSetupConfig() throws BadConfigFormatException {
 		try {
-			SetupGame();
+			FileReader file = new FileReader("src/data/" + this.setupConfigFile);
+			Scanner scanner = new Scanner(file);
+			while (scanner.hasNextLine()) {
+				String[] row = scanner.nextLine().split(", ");
+				if (row.length >= 3 && (row[0].equals("Room") || row[0].equals("Space"))) {
+					char inital = row[2].charAt(0);
+					Room room = new Room();
+					room.setName(row[1]);
+					this.roomMap.put(inital, room);
+				}
+			}
 		} catch (FileNotFoundException e ) {
 			throw new BadConfigFormatException("Setup Config file not found.");
 		}
+		
+	
 	}
-
-	private void SetupGame() throws FileNotFoundException {
-		FileReader file = new FileReader("src/data/" + this.setupConfigFile);
-		Scanner scanner = new Scanner(file);
-		while (scanner.hasNextLine()) {
-			String[] row = scanner.nextLine().split(", ");
-			if (row.length >= 3 && (row[0].equals("Room") || row[0].equals("Space"))) {
-				char inital = row[2].charAt(0);
-				Room room = new Room();
-				room.setName(row[1]);
-				this.roomMap.put(inital, room);
-			}
-		}
-	}
-
-	/*
-	 * Initializes the layout of the board
-	 */
+	
+	// Initializes the layout of the board
 	public void loadLayoutConfig() throws BadConfigFormatException {
 		// ArrayList of string
 		List<String> cellList = new ArrayList<>();
 
+		// add each cell initial in layout file to cellList
 		try {
-			// create board
-			setupLayout(cellList); // read layout file and add each cell initial in layout file to cellList
-			int cellListLocation = 0; // list index
-			this.grid = new BoardCell[this.numRows][this.numColumns];
-			
-			try {
-				createBoard(cellList, cellListLocation);
-			} catch (IndexOutOfBoundsException e){
-				throw new BadConfigFormatException("LayoutConfig invalid");
-			}
-
-		} catch (FileNotFoundException e){
-			throw new BadConfigFormatException("Setup Config file not found.");
-		}
-	}
-	
-	/*
-	 * Sets up the layout of the board
-	 */
-	private void setupLayout(List<String> cellList) throws FileNotFoundException {
-		FileReader file = new FileReader("src/data/" + this.layoutConfigFile);
-		Scanner scanner = new Scanner(file);
-		while (scanner.hasNextLine()) {
-			String[] row = scanner.nextLine().split(",");
-			for (String cell: row) {
-				cellList.add(cell);
+			FileReader file = new FileReader("src/data/" + this.layoutConfigFile);
+			Scanner scanner = new Scanner(file);
+			while (scanner.hasNextLine()) {
+				String[] row = scanner.nextLine().split(",");
+				for (String cell: row) {
+					cellList.add(cell);
+				}
 			}
-		}
-		scanner.close();
-	}
-	/*
-	 * Creates the board
-	 */
-	private void createBoard(List<String> cellList, int cellListLocation) throws BadConfigFormatException {
+			scanner.close();
+		// create board
+		int cellListLocation = 0; // counter
+		this.grid = new BoardCell[this.numRows][this.numColumns];
+		try {
 		for (int row = 0; row < this.numRows; row++) { // adding cells to grid
 			for (int column = 0; column < this.numColumns; column++) {
 				this.grid[row][column] = new BoardCell(row, column);
 				String cell = cellList.get(cellListLocation);
-
+				
 				// if cell is more than one character
-				char charAtIndex1 = cell.charAt(0);
 				if (cell.length() > 1) {
 					// set initial
-					this.grid[row][column].setInitial(charAtIndex1);
+					this.grid[row][column].setInitial(cell.charAt(0));
 					// check if it is a label
-					String initial = String.valueOf(charAtIndex1);
-					if (cell.equals(initial + "#")) {
-						this.roomMap.get(charAtIndex1).setLabelCell(this.grid[row][column]);
+					if (cell.equals(String.valueOf(cell.charAt(0)) + "#")) {
+						this.roomMap.get(cell.charAt(0)).setLabelCell(this.grid[row][column]);
 						this.grid[row][column].setRoomLabel(true);
 						this.grid[row][column].setIsRoom(true);
 					}
 					// check if it is a center
-					else if (cell.equals(initial + "*")) {
-						this.roomMap.get(charAtIndex1).setCenterCell(this.grid[row][column]);
+					else if (cell.equals(String.valueOf(cell.charAt(0)) + "*")) {
+						this.roomMap.get(cell.charAt(0)).setCenterCell(this.grid[row][column]);
 						this.grid[row][column].setRoomCenter(true);
 						this.grid[row][column].setIsRoom(true);
 					}	
 					// check if it is a door also set the door direction
-					else if (cell.equals(initial + "^")) {
+					else if (cell.equals(String.valueOf(cell.charAt(0)) + "^")) {
 						this.grid[row][column].setDoorway(true);
 						this.grid[row][column].setDoorDirection(DoorDirection.UP);
 					}
-					else if (cell.equals(initial + ">")) {
+					else if (cell.equals(String.valueOf(cell.charAt(0)) + ">")) {
 						this.grid[row][column].setDoorway(true);
 						this.grid[row][column].setDoorDirection(DoorDirection.RIGHT);
 					}
-					else if (cell.equals(initial + "v")) {
+					else if (cell.equals(String.valueOf(cell.charAt(0)) + "v")) {
 						this.grid[row][column].setDoorway(true);
 						this.grid[row][column].setDoorDirection(DoorDirection.DOWN);
 					}
-					else if (cell.equals(initial + "<")) {
+					else if (cell.equals(String.valueOf(cell.charAt(0)) + "<")) {
 						this.grid[row][column].setDoorway(true);
 						this.grid[row][column].setDoorDirection(DoorDirection.LEFT);
 					}
@@ -225,38 +190,41 @@ public class Board {
 						this.grid[row][column].setIsRoom(true);
 					}
 				}
-				// if cell is one character
 				else {
-					// if cell is a unused space
 					if (cell.equals("X")) {
-						this.grid[row][column].setInitial(charAtIndex1);
+						this.grid[row][column].setInitial(cell.charAt(0));
 						this.grid[row][column].setOccupied(true);
 					}
-					// if cell is a walkway
 					else if (cell.equals("W")) {
-						this.grid[row][column].setInitial(charAtIndex1);
+						this.grid[row][column].setInitial(cell.charAt(0));
 					}
 					else {
-						if (roomMap.containsKey(charAtIndex1)) {
-							this.grid[row][column].setInitial(charAtIndex1);
+						if (roomMap.containsKey(cell.charAt(0))) {
+							this.grid[row][column].setInitial(cell.charAt(0));
 							this.grid[row][column].setIsRoom(true);
-						} 
-						else {
+						} else {
 							throw new BadConfigFormatException(cell + " is not in the legend");
 						}
 					}
 				}
-
+				
 				// increment counter
 				cellListLocation += 1;
 			}
 		}
+		} catch (IndexOutOfBoundsException e){
+			throw new BadConfigFormatException("LayoutConfig invalid");
+		}
 		
 		this.targets = new HashSet<>();
 		this.visited = new HashSet<>();
 		this.calculateAdjacencies(this.numRows, this.numColumns);
-	}
+		} catch (FileNotFoundException e){
+			throw new BadConfigFormatException("Setup Config file not found.");
+		}
 
+	}
+	
 	/*
 	 * Sets layout to layoutConfigFile and setup setupConfigFile. Method also gets the size of
 	 * the board.
@@ -265,14 +233,6 @@ public class Board {
 		this.layoutConfigFile = layout;
 		this.setupConfigFile = setup;
 		this.roomMap = new HashMap<>();
-		getBoardSize(layout);
-
-	}
-	
-	/*
-	 * Gets the size of the board
-	 */
-	private void getBoardSize(String layout) {
 		// get size of board
 		int rows = 0;
 		int columns = 0;
@@ -290,12 +250,15 @@ public class Board {
 		}
 		this.numRows = rows;
 		this.numColumns = columns;
+			
 	}
+	
 
 	public BoardCell getCell(int row, int col) {
 		return grid[row][col];
+		
 	}
-
+	
 	public Set<BoardCell> getTargets() {
 		return targets;
 	}
@@ -303,14 +266,16 @@ public class Board {
 	public static Board getTheInstance() {
 		return theInstance;
 	}
-
+	
+	// MAYBE NEED TO BE CHANGED FOR TEST TO WORK
 	public Room getRoom(char initial) {
 		return roomMap.get(initial);
 	}
-
+	
 	public Room getRoom(BoardCell cell) {
 		char initial = cell.getInitial();
 		return roomMap.get(initial);
+		
 	}
 
 	public int getNumRows() {
